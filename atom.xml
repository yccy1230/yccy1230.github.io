<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Michael&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yccy1230.github.io/"/>
  <updated>2018-10-14T16:18:14.514Z</updated>
  <id>https://yccy1230.github.io/</id>
  
  <author>
    <name>Michael Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[图像处理]基于OpenCV对堆叠零件识别与定位</title>
    <link href="https://yccy1230.github.io/2018/10/13/%5B%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%5D%E5%9F%BA%E4%BA%8EOpenCV%E5%AF%B9%E5%A0%86%E5%8F%A0%E9%9B%B6%E4%BB%B6%E8%AF%86%E5%88%AB%E4%B8%8E%E5%AE%9A%E4%BD%8D/"/>
    <id>https://yccy1230.github.io/2018/10/13/[图像处理]基于OpenCV对堆叠零件识别与定位/</id>
    <published>2018-10-13T15:49:00.000Z</published>
    <updated>2018-10-14T16:18:14.514Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Oct 15 2018 00:19:35 GMT+0800 (中国标准时间) --><h3 id="一、项目介绍"><a href="#一、项目介绍" class="headerlink" title="一、项目介绍"></a>一、项目介绍</h3><p>&emsp;&emsp;项目的目标正如标题所言，去识别堆叠零件中的可以被抓取的零件的位置，最后把数据输入到机械臂中实现零件的自动抓取。我们尝试了几种方法：</p><ul><li>通过机器学习的方式对图像中的零件进行勾勒，得到一批初始数据，通过将数据输入到yolo3框架中进行识别。这里数据的处理是一个很大的工作量，实验结果未出。</li><li>尝试通过数字图像的方式进行处理，对零件形状进行检测识别。</li><li>通过传统的机器学习（SVM）对图像进行分类</li></ul><p>&emsp;&emsp;我尝试的部分是后两者。附上需要处理的图像：<br><img src="https://hexo-1252490818.cos.ap-shanghai.myqcloud.com/QQ%E5%9B%BE%E7%89%8720181014232243.jpg" width="300" hegiht="100" align="center"></p><hr><h3 id="二、项目基础"><a href="#二、项目基础" class="headerlink" title="二、项目基础"></a>二、项目基础</h3><ul><li>OpenCV3.4 + VS2017 <a href="https://blog.csdn.net/biaobro/article/details/79141868" target="_blank" rel="noopener">教程</a></li><li><a href="https://blog.csdn.net/edogawachia/article/details/78837988" target="_blank" rel="noopener">bilateralFilter双边滤波</a>对图像进行平滑处理</li><li><a href="https://www.cnblogs.com/hustlx/p/5245461.html" target="_blank" rel="noopener">直方图均衡化</a>图像增强</li><li><a href="https://blog.csdn.net/u012507022/article/details/50979005" target="_blank" rel="noopener">Hough变换实现椭圆检测</a></li><li><a href="https://blog.csdn.net/liugan528/article/details/79448379" target="_blank" rel="noopener">SVM(Support Vector Machine)</a>支持向量机</li></ul><p>&emsp;&emsp;这些算法在opencv中都有进行实现，所以代码会比较简单。</p><h3 id="三、基本思路"><a href="#三、基本思路" class="headerlink" title="三、基本思路"></a>三、基本思路</h3><p>&emsp;基于传统数字图像的处理方式:<br>&emsp;&emsp;1、对图像进行预处理，进行平滑（去噪）。<br>&emsp;&emsp;2、直方图均衡化图像增强效果<br>&emsp;&emsp;3、做二值化处理，为椭圆检测做铺垫<br>&emsp;&emsp;4、执行椭圆检测<br>&emsp;&emsp;5、绘制到原图上</p><p>效果图：<br><img src="https://hexo-1252490818.cos.ap-shanghai.myqcloud.com/canny_edge.png" width="300"><br><img src="https://hexo-1252490818.cos.ap-shanghai.myqcloud.com/afterFilter.png" width="300"><br><img src="https://hexo-1252490818.cos.ap-shanghai.myqcloud.com/circle_result.png" width="300"><br><img src="https://hexo-1252490818.cos.ap-shanghai.myqcloud.com/circle-point.png" width="300"><br></p><p>ps:测试图像上已经有三个红圈了，所以那几个位置会比较浓。详细对比一下一开始的原图。</p><h3 id="附录：部分代码"><a href="#附录：部分代码" class="headerlink" title="附录：部分代码"></a>附录：部分代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">//1、通过双边滤波对图像进行平滑处理--去躁</span><br><span class="line">//2、直方图均衡化图像增强效果</span><br><span class="line">//3、做二值化处理</span><br><span class="line">//4、findContours寻找图像中的椭圆</span><br><span class="line"></span><br><span class="line">#include &quot;pch.h&quot;</span><br><span class="line"></span><br><span class="line">#include &lt;opencv2/opencv.hpp&gt;</span><br><span class="line">#include&lt;opencv2/highgui/highgui.hpp&gt;</span><br><span class="line">#include&lt;opencv2/imgproc/imgproc.hpp&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line"></span><br><span class="line">using namespace cv;</span><br><span class="line"></span><br><span class="line">int ellipse(Mat image1);</span><br><span class="line">const char *fn = &quot;C:\\Users\\Michael Chen\\Desktop\\1.jpg&quot;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">Mat smooth,grad_x, grad_y;</span><br><span class="line">Mat abs_grad_x, abs_grad_y, dst;</span><br><span class="line"></span><br><span class="line">Mat origin = imread(fn);  </span><br><span class="line">//imshow(&quot;origin&quot;, origin);</span><br><span class="line"></span><br><span class="line">// 图像平滑去躁</span><br><span class="line">bilateralFilter(origin, smooth, 30, 30 * 2, 30 / 2);</span><br><span class="line">namedWindow(&quot;smooth&quot;, 0);</span><br><span class="line">imshow(&quot;smooth&quot;, smooth);</span><br><span class="line"></span><br><span class="line">Mat imageRGB[3];</span><br><span class="line">split(smooth, imageRGB);</span><br><span class="line">for (int i = 0; i &lt; 3; i++)</span><br><span class="line">&#123;</span><br><span class="line">equalizeHist(imageRGB[i], imageRGB[i]);</span><br><span class="line">&#125;</span><br><span class="line">merge(imageRGB, 3, smooth);</span><br><span class="line">//imshow(&quot;直方图均衡化图像增强效果&quot;, smooth);</span><br><span class="line"></span><br><span class="line">ellipse(smooth);</span><br><span class="line"></span><br><span class="line">//二值化处理</span><br><span class="line">Mat thresho;</span><br><span class="line">threshold(smooth, thresho, 35, 250, CV_THRESH_BINARY);</span><br><span class="line">//imshow(&quot;thresho&quot;, thresho);</span><br><span class="line"></span><br><span class="line">//// sober - x</span><br><span class="line">//Sobel(thresho, grad_x, CV_16S, 1, 0, 3, 1, 1, BORDER_DEFAULT);</span><br><span class="line">//convertScaleAbs(grad_x, abs_grad_x);</span><br><span class="line"></span><br><span class="line">//// sober - y</span><br><span class="line">//Sobel(thresho, grad_y, CV_16S, 0, 1, 3, 1, 1, BORDER_DEFAULT);</span><br><span class="line">//convertScaleAbs(grad_y, abs_grad_y);</span><br><span class="line"></span><br><span class="line">////sober-x + sober-y</span><br><span class="line">//addWeighted(abs_grad_x, 0.5, abs_grad_y, 0.5, 0, dst);</span><br><span class="line">//imwrite(&quot;C:\\Users\\cheny\\Desktop\\sober.jpg&quot;, dst);</span><br><span class="line">//imshow(&quot;result&quot;, dst);</span><br><span class="line"></span><br><span class="line">waitKey(0);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//#define minwidth 30</span><br><span class="line">Size2f a;</span><br><span class="line">const decltype(a.width) minwidth = 40;  //if you dont know the type of width </span><br><span class="line">#define minheight  30                   </span><br><span class="line">#define maxwidth   100</span><br><span class="line">#define maxheight  100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">double threshold1 = 130;</span><br><span class="line">double threshold2 = 200;</span><br><span class="line">int apertureSize = 3;//aperture size for the Sobel() operator.</span><br><span class="line">int point_num_min = 150; //least point in a contour</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int ellipse(Mat image1)</span><br><span class="line">&#123;</span><br><span class="line">cvtColor(image1, image1, CV_BGR2GRAY);</span><br><span class="line">GaussianBlur(image1, image1, Size(7, 7), 1.5, 1.5);</span><br><span class="line">Canny(image1, image1, threshold1, threshold2, apertureSize, false);</span><br><span class="line">namedWindow(&quot;canny_edge1&quot;, 0);</span><br><span class="line">imshow(&quot;canny_edge1&quot;, image1);</span><br><span class="line">std::vector&lt;std::vector&lt;Point&gt; &gt; contours1;</span><br><span class="line">std::vector&lt;RotatedRect&gt; contours01;</span><br><span class="line"></span><br><span class="line">findContours(image1, contours1, CV_RETR_LIST, CV_CHAIN_APPROX_NONE, cvPoint(0, 0));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Mat allcontours(image1.size(), CV_8U, Scalar(255));</span><br><span class="line"></span><br><span class="line">contours01.reserve(contours1.size());</span><br><span class="line"></span><br><span class="line">for (std::size_t k = 0; k &lt; contours1.size(); k++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int count = contours1[k].size(); // This is point&apos;s number in the contour</span><br><span class="line">if (count &gt; point_num_min)   //  the least points to form a contour</span><br><span class="line">contours01.push_back(fitEllipse(contours1[k]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drawContours(allcontours, contours1, -1, CV_RGB(0, 0, 0), 1,LINE_8, noArray(), contours1.size(), cvPoint(0, 0));</span><br><span class="line"></span><br><span class="line">Size2f min;</span><br><span class="line">Size2f max;</span><br><span class="line">min.width = minwidth;</span><br><span class="line">min.height = minheight;</span><br><span class="line">max.width = maxwidth;</span><br><span class="line">max.height = maxheight;</span><br><span class="line"></span><br><span class="line">Mat origin = imread(fn, 1);</span><br><span class="line">for (auto a : contours01)</span><br><span class="line">&#123;</span><br><span class="line">auto ellipse_size = a.size;</span><br><span class="line">if (</span><br><span class="line">ellipse_size.width &lt; max.width &amp;&amp; ellipse_size.height &lt; max.height</span><br><span class="line">&amp;&amp;    ellipse_size.width &gt; min.width &amp;&amp; ellipse_size.height &gt; min.height</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">ellipse(origin, a, CV_RGB(255,0,0),2);</span><br><span class="line">std::cout &lt;&lt; &quot;size = &quot; &lt;&lt; a.size &lt;&lt; &quot; , &quot;</span><br><span class="line">&lt;&lt; &quot;center =&quot; &lt;&lt; a.center &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namedWindow(&quot;drawcontour&quot;, 0);</span><br><span class="line">namedWindow(&quot;ellipsecontour&quot;, 0);</span><br><span class="line">imshow(&quot;drawcontour&quot;, allcontours);</span><br><span class="line">imshow(&quot;ellipsecontour&quot;, origin);</span><br><span class="line">waitKey(0);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Mon Oct 15 2018 00:19:35 GMT+0800 (中国标准时间) --&gt;&lt;h3 id=&quot;一、项目介绍&quot;&gt;&lt;a href=&quot;#一、项目介绍&quot; class=&quot;headerlink&quot; title=&quot;一、项目介绍&quot;&gt;&lt;/a&gt;一、项目介绍
      
    
    </summary>
    
    
  </entry>
  
</feed>
